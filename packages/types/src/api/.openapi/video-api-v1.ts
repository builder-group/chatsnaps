/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/blueprint/chatstory/video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["chatStoryBlueprintVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blueprint/chatstory/prompt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["chatStoryBlueprintPrompt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check API health
         * @description Returns the current health status of the API
         */
        get: operations["checkEnergyLabelHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/render": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["renderVideo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppErrorDto: {
            /**
             * @description The error code
             * @example #ERR_UNKNOWN
             */
            error_code: string;
            /**
             * @description A description of the error
             * @example An unknown error occurred
             */
            error_description?: string;
            /**
             * @description A URI with more information about the error
             * @example https://example.com/errors/unknown
             */
            error_uri?: string | null;
            /**
             * @description Additional error information
             * @example [
             *       {
             *         "field": "username",
             *         "message": "Username is already taken"
             *       }
             *     ]
             */
            additional_errors?: {
                [key: string]: unknown;
            }[];
        };
        HealthDto: {
            /**
             * @example Up
             * @enum {string}
             */
            status: "Up" | "Down";
            /** @example App is up and running */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    chatStoryBlueprintVideo: {
        parameters: {
            query?: {
                includeVoiceover?: "true" | "false";
                includeBackgroundVideo?: "true" | "false";
                useCached?: "true" | "false";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    title: string;
                    participants: {
                        id: number;
                        displayName: string;
                        isSelf: boolean;
                        voice?: string;
                    }[];
                    events: ({
                        /** @enum {string} */
                        type: "Message";
                        content: string;
                        spokenContent?: string;
                        participantId: number;
                    } | {
                        /** @enum {string} */
                        type: "Pause";
                        durationMs: number;
                    })[];
                    messenger?: {
                        /** @enum {string} */
                        type: "IMessage";
                        contact: {
                            profilePicture: {
                                src: string;
                                width?: number;
                                height?: number;
                                /** @enum {string} */
                                objectFit?: "fill" | "contain" | "cover" | "none";
                                /** @enum {string} */
                                type: "Image";
                            } | {
                                src: string;
                                width?: number;
                                height?: number;
                                /** @enum {string} */
                                objectFit?: "fill" | "contain" | "cover" | "none";
                                /** @enum {string} */
                                type: "Video";
                                startFrom?: number;
                                endAt?: number;
                                playbackRate?: number;
                            };
                            name: string;
                        };
                    } | {
                        /** @enum {string} */
                        type: "WhatsApp";
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        video: {
                            name: string;
                            width: number;
                            height: number;
                            fps: number;
                            durationInFrames?: number;
                            timeline: {
                                trackIds: string[];
                                trackMap: {
                                    [key: string]: {
                                        /** @enum {string} */
                                        type: "Track";
                                        actionIds: string[];
                                    } | {
                                        /** @enum {string} */
                                        type: "Plugin";
                                        actionIds: string[];
                                        width?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        height?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        x?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        y?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        opacity?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        pluginId: string;
                                        props?: unknown;
                                    };
                                };
                                actionMap: {
                                    [key: string]: {
                                        /** @enum {string} */
                                        type: "Audio";
                                        startFrame: number;
                                        durationInFrames: number;
                                        src: string;
                                        volume: number;
                                        startFrom?: number;
                                        endAt?: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "Rectangle";
                                        startFrame: number;
                                        durationInFrames: number;
                                        width: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        height: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        x?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        y?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        opacity?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        fill: {
                                            /** @enum {string} */
                                            type: "Video";
                                            src: string;
                                            /** @enum {string} */
                                            objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                            width: number;
                                            height: number;
                                            startFrom?: number;
                                            endAt?: number;
                                            playbackRate?: number;
                                        } | {
                                            /** @enum {string} */
                                            type: "Image";
                                            src: string;
                                            /** @enum {string} */
                                            objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                            width: number;
                                            height: number;
                                        } | {
                                            /** @enum {string} */
                                            type: "Solid";
                                            color: string;
                                        };
                                    } | {
                                        /** @enum {string} */
                                        type: "Ellipse";
                                        startFrame: number;
                                        durationInFrames: number;
                                        width: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        height: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        x?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        y?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        opacity?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        fill: {
                                            /** @enum {string} */
                                            type: "Video";
                                            src: string;
                                            /** @enum {string} */
                                            objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                            width: number;
                                            height: number;
                                            startFrom?: number;
                                            endAt?: number;
                                            playbackRate?: number;
                                        } | {
                                            /** @enum {string} */
                                            type: "Image";
                                            src: string;
                                            /** @enum {string} */
                                            objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                            width: number;
                                            height: number;
                                        } | {
                                            /** @enum {string} */
                                            type: "Solid";
                                            color: string;
                                        };
                                    } | {
                                        /** @enum {string} */
                                        type: "Plugin";
                                        startFrame: number;
                                        durationInFrames: number;
                                        width?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        height?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        x?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        y?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        opacity?: number | {
                                            frame: number;
                                            value: number;
                                        }[];
                                        pluginId: string;
                                        props?: unknown;
                                    };
                                };
                            };
                        };
                        usage: {
                            credits: number;
                            usd: number;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
        };
    };
    chatStoryBlueprintPrompt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    originalStory: string;
                    targetAudience?: string;
                    targetLength?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        script: {
                            title: string;
                            participants: {
                                id: number;
                                displayName: string;
                                isSelf: boolean;
                                voice?: string;
                            }[];
                            events: ({
                                /** @enum {string} */
                                type: "Message";
                                content: string;
                                spokenContent?: string;
                                participantId: number;
                            } | {
                                /** @enum {string} */
                                type: "Pause";
                                durationMs: number;
                            })[];
                            messenger?: {
                                /** @enum {string} */
                                type: "IMessage";
                                contact: {
                                    profilePicture: {
                                        src: string;
                                        width?: number;
                                        height?: number;
                                        /** @enum {string} */
                                        objectFit?: "fill" | "contain" | "cover" | "none";
                                        /** @enum {string} */
                                        type: "Image";
                                    } | {
                                        src: string;
                                        width?: number;
                                        height?: number;
                                        /** @enum {string} */
                                        objectFit?: "fill" | "contain" | "cover" | "none";
                                        /** @enum {string} */
                                        type: "Video";
                                        startFrom?: number;
                                        endAt?: number;
                                        playbackRate?: number;
                                    };
                                    name: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "WhatsApp";
                            };
                        };
                        usage: {
                            inputTokens: number;
                            outputTokens: number;
                            usd: number;
                        };
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
        };
    };
    checkEnergyLabelHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
        };
    };
    renderVideo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    name: string;
                    width: number;
                    height: number;
                    fps: number;
                    durationInFrames?: number;
                    timeline: {
                        trackIds: string[];
                        trackMap: {
                            [key: string]: {
                                /** @enum {string} */
                                type: "Track";
                                actionIds: string[];
                            } | {
                                /** @enum {string} */
                                type: "Plugin";
                                actionIds: string[];
                                width?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                height?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                x?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                y?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                opacity?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                pluginId: string;
                                props?: unknown;
                            };
                        };
                        actionMap: {
                            [key: string]: {
                                /** @enum {string} */
                                type: "Audio";
                                startFrame: number;
                                durationInFrames: number;
                                src: string;
                                volume: number;
                                startFrom?: number;
                                endAt?: number;
                            } | {
                                /** @enum {string} */
                                type: "Rectangle";
                                startFrame: number;
                                durationInFrames: number;
                                width: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                height: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                x?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                y?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                opacity?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                fill: {
                                    /** @enum {string} */
                                    type: "Video";
                                    src: string;
                                    /** @enum {string} */
                                    objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                    width: number;
                                    height: number;
                                    startFrom?: number;
                                    endAt?: number;
                                    playbackRate?: number;
                                } | {
                                    /** @enum {string} */
                                    type: "Image";
                                    src: string;
                                    /** @enum {string} */
                                    objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                    width: number;
                                    height: number;
                                } | {
                                    /** @enum {string} */
                                    type: "Solid";
                                    color: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "Ellipse";
                                startFrame: number;
                                durationInFrames: number;
                                width: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                height: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                x?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                y?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                opacity?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                fill: {
                                    /** @enum {string} */
                                    type: "Video";
                                    src: string;
                                    /** @enum {string} */
                                    objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                    width: number;
                                    height: number;
                                    startFrom?: number;
                                    endAt?: number;
                                    playbackRate?: number;
                                } | {
                                    /** @enum {string} */
                                    type: "Image";
                                    src: string;
                                    /** @enum {string} */
                                    objectFit: "contain" | "cover" | "fill" | "none" | "scale-down";
                                    width: number;
                                    height: number;
                                } | {
                                    /** @enum {string} */
                                    type: "Solid";
                                    color: string;
                                };
                            } | {
                                /** @enum {string} */
                                type: "Plugin";
                                startFrame: number;
                                durationInFrames: number;
                                width?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                height?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                x?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                y?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                opacity?: number | {
                                    frame: number;
                                    value: number;
                                }[];
                                pluginId: string;
                                props?: unknown;
                            };
                        };
                    };
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        url: string | null;
                    };
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppErrorDto"];
                };
            };
        };
    };
}
